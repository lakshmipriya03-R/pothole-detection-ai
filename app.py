import streamlit as st
from PIL import Image
from fpdf import FPDF
from datetime import datetime

# Set page config
st.set_page_config(page_title="Pothole Detection AI", page_icon="üï≥Ô∏è", layout="wide")

# Title and description
st.title("üï≥Ô∏è Pothole Detection AI")
st.write("Upload an image to detect potholes and generate professional analysis report")

# PDF generation function with Unicode fix
def generate_professional_pdf(analysis_results):
    # Create PDF with Unicode support
    pdf = FPDF()
    pdf.add_page()
    
    # Add a Unicode-compatible font
    pdf.add_font('DejaVu', '', 'DejaVuSansCondensed.ttf', uni=True)
    pdf.add_font('DejaVu', 'B', 'DejaVuSansCondensed-Bold.ttf', uni=True)
    
    # Header
    pdf.set_font('DejaVu', 'B', 24)
    pdf.cell(0, 20, "Pothole Analysis Report", 0, 1, 'C')
    pdf.set_font('DejaVu', '', 12)
    pdf.cell(0, 10, f"Comprehensive Road Infrastructure Assessment | {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}", 0, 1, 'C')
    pdf.ln(10)
    
    # Executive Summary - SIMPLIFIED WITHOUT UNICODE CHARACTERS
    pdf.set_font('DejaVu', 'B', 16)
    pdf.cell(0, 10, "Executive Summary", 0, 1)
    
    # Use simple text without special characters
    summary_data = [
        ("Total Potholes Detected:", f"{analysis_results['total_potholes']}"),
        ("Overall Risk Level:", f"{analysis_results['risk_level']}"),
        ("Total Damage Area:", f"{analysis_results['total_area']} pixels"),
        ("AI Model Confidence:", f"{analysis_results['confidence']}% Accuracy")
    ]
    
    pdf.set_font('DejaVu', '', 12)
    for label, value in summary_data:
        pdf.cell(90, 10, label, 0, 0)
        pdf.cell(0, 10, value, 0, 1)
    
    pdf.ln(10)
    
    # Detailed Analysis - SIMPLIFIED
    pdf.set_font('DejaVu', 'B', 16)
    pdf.cell(0, 10, "Detailed Pothole Analysis", 0, 1)
    
    # Add first pothole details only (to keep it simple)
    pothole = analysis_results['potholes'][0]
    pdf.set_font('DejaVu', 'B', 14)
    pdf.cell(0, 10, f"Pothole #1 - {pothole['risk_level']}", 0, 1)
    
    pdf.set_font('DejaVu', '', 12)
    details = [
        ("Detection Confidence:", f"{pothole['confidence']}%"),
        ("Dimensions:", f"{pothole['width']} x {pothole['height']} pixels"),
        ("Area Coverage:", f"{pothole['area']} pixels"),
        ("Severity Level:", f"{pothole['severity']}%")
    ]
    
    for label, value in details:
        pdf.cell(60, 8, label, 0, 0)
        pdf.cell(0, 8, value, 0, 1)
    
    pdf.ln(3)
    pdf.multi_cell(0, 8, pothole['impact'])
    pdf.ln(3)
    pdf.multi_cell(0, 8, f"Urgency: {pothole['urgency']}")
    pdf.multi_cell(0, 8, f"Cost Estimate: {pothole['cost_estimate']}")
    
    pdf.ln(10)
    pdf.set_font('DejaVu', 'I', 10)
    pdf.cell(0, 10, "Generated by Advanced AI Pothole Detection System | Model Accuracy: 64.1%", 0, 1, 'C')
    
    return pdf.output(dest='S').encode('latin1')

# Mock analysis data (NO UNICODE CHARACTERS)
def analyze_image(image):
    return {
        "total_potholes": 7,
        "risk_level": "EXTREME",
        "total_area": 11942,
        "confidence": 64.1,
        "potholes": [
            {
                "confidence": 92.24, "width": 102, "height": 24, "area": 2448, 
                "severity": 30, "risk_level": "LOW RISK",
                "impact": "Minor vehicle wear, Reduced ride quality, Maintenance suggested",
                "urgency": "SCHEDULED (Within 2 weeks)",
                "cost_estimate": "INR 1,000 - 5,000"  # NO ‚Çπ SYMBOL
            }
        ]
    }

# Main app
uploaded_file = st.file_uploader("Choose an image...", type=['jpg', 'jpeg', 'png'])

if uploaded_file is not None:
    image = Image.open(uploaded_file)
    
    # Reduce image size for display
    max_size = (400, 400)
    image.thumbnail(max_size, Image.Resampling.LANCZOS)
    
    st.image(image, caption='Uploaded Image (Reduced size)', use_container_width=True)
    
    with st.spinner('Generating professional analysis report...'):
        try:
            results = analyze_image(image)
            pdf_bytes = generate_professional_pdf(results)
            
            st.success("‚úÖ Professional Analysis Completed!")
            
            st.download_button(
                label="üìÑ Download Full Professional Report PDF",
                data=pdf_bytes,
                file_name="pothole_analysis_report.pdf",
                mime="application/pdf",
                use_container_width=True
            )
            
        except Exception as e:
            st.error(f"Error generating PDF: {str(e)}")
            st.info("Please try again with a different image")
