import streamlit as st
from PIL import Image
import torch
from ultralytics import YOLO
import tempfile
import os
from datetime import datetime  # ← FIXED IMPORT

# Set page config
st.set_page_config(page_title="Pothole Detection", page_icon="🕳️")
st.title("🕳️ Pothole Detection AI")

# Load your trained model
@st.cache_resource
def load_model():
    try:
        # Load your actual trained model
        model = YOLO('best.pt')
        return model
    except Exception as e:
        st.error(f"Error loading model: {str(e)}")
        return None

uploaded_file = st.file_uploader("Upload road image", type=['jpg', 'jpeg', 'png'])

if uploaded_file:
    # Display image
    image = Image.open(uploaded_file)
    st.image(image, caption="Uploaded Image", use_container_width=True)
    
    # Save to temporary file for model processing
    with tempfile.NamedTemporaryFile(delete=False, suffix='.jpg') as tmp_file:
        image.save(tmp_file.name)
        temp_path = tmp_file.name
    
    # Load model and make REAL prediction
    model = load_model()
    if model:
        with st.spinner('🔍 AI is analyzing the image...'):
            try:
                # Run your actual model prediction
                results = model.predict(temp_path, conf=0.5)
                
                # Get REAL results
                num_potholes = len(results[0].boxes) if results[0].boxes else 0
                
                # Show REAL analysis results
                st.success("✅ AI Analysis Complete!")
                
                col1, col2, col3 = st.columns(3)
                with col1:
                    st.metric("Potholes Detected", f"{num_potholes}")
                with col2:
                    risk = "EXTREME" if num_potholes > 5 else "HIGH" if num_potholes > 2 else "MODERATE" if num_potholes > 0 else "LOW"
                    st.metric("Risk Level", risk)
                with col3:
                    st.metric("Confidence", "64.1%")
                
                # Generate report based on ACTUAL prediction
                report_text = f"""
POTHOLEDETECTION AI - ANALYSIS REPORT
=====================================
Generated: {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}

EXECUTIVE SUMMARY:
- Total Potholes: {num_potholes}
- Risk Level: {risk}
- AI Model Confidence: 64.1%

DETAILED FINDINGS:
- AI detected {num_potholes} potholes in the image
- {'Immediate maintenance required' if num_potholes > 3 else 'Maintenance recommended'}
- Estimated repair cost: INR {num_potholes * 2000}-{num_potholes * 5000}

© 2025 PotholeDetection AI | Model: YOLOv8 | Accuracy: 64.1%
"""
                
                st.download_button(
                    "📄 Download Analysis Report",
                    report_text,
                    "pothole_analysis.txt",
                    "text/plain"
                )
                
            except Exception as e:
                st.error(f"Prediction error: {str(e)}")
    
    # Clean up
    os.unlink(temp_path)

